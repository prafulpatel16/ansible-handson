Environemnt setup
#Lab: 1
Let us explore the environment for our KodeKloud e-commerce LAMP stack application. There are 2 servers - lamp-web and lamp-db. Let us setup the inventory files for that. Create an inventory file at /home/thor/playbooks/lamp-stack-playbooks/inventory to include the following data:


Hosts: lamp-web, lamp-db
Groups: db_servers contains lamp-db; web_servers contains lamp-web
IP Addresses: lamp-web: 172.20.1.100; lamp-db: 172.20.1.101
Credentials for lamp-web: Username=john Password=john
Credentials for lamp-db Username=maria Password=maria

Inventory must contain hosts
Inventory must contain groups
lamp-web server: Host, User and Password
lamp-db server: Host, User & Password


#Create Invenotry file

vi Inventory File
 # Inventory File
[web_servers]
lamp-web ansible_host=172.201.100 ansible_user=john ansible_ssh_pass=john
[db_servers]
lamp-db ansible_host=172.20.1.101 ansible_user=maria ansible_ssh_pass=maria

[db_servers]
lamp-db ansible_host=172.20.1.101 ansible_ssh_pass=maria ansible_user=maria

[web_servers]
lamp-web ansible_host=172.20.1.100 ansible_ssh_pass=john ansible_user=john



#Lab: 2

Let us setup password less authentication between Ansible Controller and the web and db servers. Create a pair of keys for each user at /home/thor/.ssh/maria and /home/thor/.ssh/john

And distribute the public keys to the web and database servers - lamp-db and lamp-web.


Password for user maria is maria and john is john




#Lab 3

Let us setup password less authentication between Ansible Controller and the web and db servers. Create a pair of keys for each user at /home/thor/.ssh/maria and /home/thor/.ssh/john

And distribute the public keys to the web and database servers - lamp-db and lamp-web.


Password for user maria is maria and john is john



ssh-keygen -f /home/thor/.ssh/maria and ssh-keygen -f /home/thor/.ssh/john and ssh-copy-id -i /home/thor/.ssh/maria maria@lamp-db and ssh-copy-id -i /home/thor/.ssh/john john@lamp-web



#Lab 4


Update the inventory file to use the newly created private keys for the respective hosts


ansible_ssh_private_key_file=/home/thor/.ssh/maria
ansible_ssh_private_key_file=/home/thor/.ssh/john



[db_servers]
lamp-db ansible_host=172.20.1.101 ansible_ssh_private_key_file=/home/thor/.ssh/maria ansible_user=maria mysqlservice=mysqld mysql_port=3306 dbname=ecomdb dbuser=ecomuser dbpassword=ecompassword

[web_servers]
lamp-web ansible_host=172.20.1.100 ansible_ssh_private_key_file=/home/thor/.ssh/john ansible_user=john httpd_port=80 repository=https://github.com/kodekloudhub/learning-app-ecommerce.git



#Lab 5


A playbook deploy-lamp-stack.yml is given with a basic tasks to install basic libraries. Execute the playbook and fix any issues.


You are not required to add any tasks or plays. Only fix the issue with execution.


- name: Deploy lamp stack application
  hosts: all
  tasks:
    - name: Install common dependencies
      yum:
        name:
          - libselinux-python
          - libsemanage-python
          - firewalld
        state: installed
        
        
Error:

  PLAY [Deploy lamp stack application] *******************************************

TASK [Gathering Facts] *********************************************************
ok: [lamp-db]
ok: [lamp-web]

TASK [Install common dependencies] *********************************************
fatal: [lamp-web]: FAILED! => {"changed": false, "msg": "ovl: Error while doing RPMdb copy-up:\n[Errno 13] Permission denied: '/var/lib/rpm/Obsoletename'\nYou need to be root to perform this command.\n", "rc": 1, "results": ["Loaded plugins: fastestmirror, ovl\n"]}
fatal: [lamp-db]: FAILED! => {"changed": false, "msg": "ovl: Error while doing RPMdb copy-up:\n[Errno 13] Permission denied: '/var/lib/rpm/Obsoletename'\nYou need to be root to perform this command.\n", "rc": 1, "results": ["Loaded plugins: fastestmirror, ovl\n"]}
	to retry, use: --limit @/home/thor/playbooks/lamp-stack-playbooks/deploy-lamp-stack.retry

PLAY RECAP *********************************************************************
lamp-db                    : ok=1    changed=0    unreachable=0    failed=1   
lamp-web                   : ok=1    changed=0    unreachable=0    failed=1  
        
        
      
 In order to solve the above error, need to be able to become a root user.
 become: yes
   


---
- name: Deploy lamp stack application
  hosts: all
  become: yes
  tasks:
    - name: Install common dependencies
      yum:
        name:
          - libselinux-python
          - libsemanage-python
          - firewalld
        state: installed


--------------------------------------------------------------------------------------------------------

Improve LAMP Stack E-commerce

Lab: 1

Let us continue to improve our LAMP stack E-Commerce application. Now that we have learned to develop playbooks and various modules, let's further develop our playbooks to install packages and configure applications.


Let us start with the first step of installing common dependencies on both the servers. We need the following packages installed on both web and db servers.

libselinux-python
libsemanage-python
firewalld.

Playbook: ~/playbooks/lamp-stack-playbooks/deploy-lamp-stack.yml

---

- name: Deploy lamp stack application
  hosts: all
  become: yes
  tasks:
    - name: Install common dependencies
      yum:
        name:
          - libselinux-python
          - libsemanage-python
          - firewalld
        state: installed


Lab: 2

Let us now configure MariaDB Service on the lamp-db server. Update the playbook to add a play to perform the following tasks on lamp-db


1. Install the following packages:
mariadb-server
MySQL-python

2. Copy the MySQL Configuration file
located at files/my.cnf to /etc/my.cnf

3. Start mariadb Service
4. Start firewalld Service
5. Insert firewalld rule
Allow mysql_port - 3306/tcp zone - public

Playbook: ~/playbooks/lamp-stack-playbooks/deploy-lamp-stack.yml

 # Install and Configure Database
- name: Deploy lamp stack application
  hosts: lamp-db
  become: yes
  tasks:
    - name: Install MariaDB package
      yum:
        name:
          - mariadb-server
          - MySQL-python
        state: installed

    - name: Create Mysql configuration file
      copy: src=files/my.cnf dest=/etc/my.cnf

    - name: Start MariaDB Service
      service: name=mariadb state=started enabled=yes

    - name: Start firewalld
      service: name=firewalld state=started enabled=yes

    - name: insert firewalld rule
      firewalld: port={{ mysql_port }}/tcp permanent=true state=enabled immediate=yes



Lab: 3






- name: Create Application Database
      mysql_db: name={{ dbname }} state=present

    - name: Create Application DB User
      mysql_user: name={{ dbuser }} password={{ dbpassword }} priv=*.*:ALL host='172.20.1.100' state=present

    - name: Move db-load-script to db host
      copy:
        src: files/db-load-script.sql
        dest: /tmp/db-load-script.sql

    - name: Load Inventory Data
      shell: mysql -f < /tmp/db-load-script.sql

- name: Deploy lamp stack application
  hosts: lamp-web
  become: yes
  tasks:
    - name: Install httpd and php
      yum:
        name:
          - httpd
          - php
          - php-mysql
        state: present

    - name: Install web role specific dependencies
      yum: name=git state=installed

    - name: Start firewalld
      service: name=firewalld state=started enabled=yes

- name: insert firewalld rule for httpd
      firewalld: port={{ httpd_port }}/tcp permanent=true state=enabled immediate=yes

    - name: Set index.php as the default page
      tags: "Set index.php as the default page"
      replace:
        path: /etc/httpd/conf/httpd.conf
        regexp: 'DirectoryIndex index.html'
        replace: 'DirectoryIndex index.php'

    - name: http service state
      service: name=httpd state=started enabled=yes

    - name: Copy the code from repository
      git: repo={{ repository }} dest=/var/www/html/  force=yes

    - name: Creates the index.php file
      copy: src=files/index.php dest=/var/www/html/index.php














